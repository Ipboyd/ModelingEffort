% gen_xSVDfilter_STRF%% This file takes a STRF_Cell or structure containing STRF_Cell and % spits out a STRF reconstructed from the first m singular valuesfunction [cleanfilter,varargout] = gen_xSVDfilter_STRF(filter,varargin)nin = nargin;switch nin    case 1        nsig = [];    case 2        nsig = varargin;    otherwise        disp('Improper number of input arguments');endif isstruct(filter)    filter=filter.STRF_Cell;end[nF,nT] = size(filter);filterwin = floor(nT/2)+1:floor(nT/2)+101; % this is the causal part of the STRF where the significant structure isnoisewin = floor(nT/2)-150:floor(nT/2)-50; % this is acausal part which can be used to determine a level of significance for singular valuess = svd(filter(:,filterwin));if nin == 1    snoise = svd(filter(:,noisewin));    siglevel = max(snoise);    sigind = find(s > siglevel);    nsig = length(sigind);end% nsig = 4;% nsig = 2;% nsig = length(sigind);% nsig = m;[u,s,v] = svd(filter);cleanfilter = u(:,1:nsig)*s(1:nsig,1:nsig)*(v(:,1:nsig)');singularvals = diag(s)/max(diag(s));% figure% plot(diag(s),'ko','MarkerSize',10);% hold on% plot(snoise,'kx','MarkerSize',10);% set(gca,'linewidth',2,'fontweight','bold','fontsize',10);% xlabel('Matrix Number','fontweight','bold','fontsize',15);% ylabel('Singular Value','fontweight','bold','fontsize',15);% title('SVs for STRF and Noise');SI = (singularvals(1)-singularvals(4))/sum(singularvals(1:3)-singularvals(4)); % Separability Index from Sen et al 2001nout = max(nargout,1)-1;varargout = cell(nout);outArgs = {'s','nsig','SI'};for i = 1:nout    varargout{i} = eval(outArgs{i});        end